#!/bin/bash
#
# This script runs `dumpprivkey` by safely unlocking the encrypted wallet and iterating
# over a list of supplied public addresses.
# See: https://bitcoin.org/en/developer-reference#dumpprivkey
#
# Note that port 8332 needs to be open to allow bitcoin-cli to communicate with bitcoind.
# By default, this port is closed in TAILS - so we need to add an appropriate
# iptables rule.
# ------------------------------------------------------------------------------
set -o nounset
set -o errexit
THIS=$(readlink -f ${BASH_SOURCE[0]})
PROJECT_ROOT=$(dirname $THIS)
. ${PROJECT_ROOT}/lib/config
. ${PROJECT_ROOT}/lib/select-coin
. ${PROJECT_ROOT}/lib/setup-binaries
. ${PROJECT_ROOT}/lib/setup-cold-wallet
CUSTOM_DATA_DIR='false'

read -p "Set up Binaries? [y/N]" PROCEED_BINARIES
case $PROCEED_BINARIES in
  [Yy]* )
    select_coin
    setup_binaries
  ;;
  [Nn]* )
    echo "Proceeding without setup of binaries..."
    select_coin
  ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Do you wish to set up a cold wallet? [y/N]" PROCEED
case $PROCEED in
  [Yy]* )
  select_cold_wallet
  copy_wallet
  WALLET_NAME=$(basename "${WALLET_FILE}")
  ;;
  [Nn]* )
  echo "END"
  ;;
  * ) echo "Please answer yes or no.";;
esac

# Unlock the wallet.
# ------------------------------------------------------------------------------
function unlock {
  echo "Please enter the wallet passphrase: "
  read -s WALLET_PASSPHRASE
  echo "Unlocking wallet..."
   ${COIN}-cli -wallet=cold-wallet.dat -rpcwait walletpassphrase "${WALLET_PASSPHRASE}" 600
}

function select_passphrase_file {
  ENCRYPTED_PASSPHRASE=$(zenity --file-selection --title="Select a file that contains an encrypted passphrase." --filename=~/)
  case $? in
    0)
    echo "\"${ENCRYPTED_PASSPHRASE}\" selected.";;
    1)
    echo "No file selected.";;
    -1)
    echo "An unexpected error has occurred.";;
  esac
}

function create_passphrase_file {
  PASSPHRASE_FILE=$(zenity --file-selection --save --title="Create a file that will contain your encrypted passphrase file. This file should be kept permanently offline." --filename=~/)
  case $? in
    0)
    echo "\"${PASSPHRASE_FILE}\" selected.";;
    1)
    echo "No file selected.";;
    -1)
    echo "An unexpected error has occurred.";;
  esac
  echo "Creating passphrase file using openssl..."
  # Note that openssl rand -base64 adds a newline at char 65
  openssl rand -base64 64 | tr -d '\n ' > ${PASSPHRASE_FILE}
  gpg --armor --output ${PASSPHRASE_FILE}.gpg --batch --passphrase ${MAIN_PASS} --symmetric ${PASSPHRASE_FILE}
  shred -vfzu ${PASSPHRASE_FILE}
  ENCRYPTED_PASSPHRASE=${PASSPHRASE_FILE}.gpg
}

# Use bitcoin-cli dumpprivkey command to output private keys for specified public
# addresses. The private key for each address is encrypted into a file whose filename
# corresponds to the public address. Uses GPG to symmetrically encrypt the dumped
# private key files, then securely deletes the originals using the shred utility.
# ------------------------------------------------------------------------------
function dump_keys {
  DATE=$(date "+%Y-%m-%d-%H:%M:%S")
  DUMP_DIR=~/${COIN}-dumpwallet-${WALLET_NAME}
  mkdir -p ${DUMP_DIR}

  echo "Enter the main passphrase."
  echo "This will be used to decrypt the passphrase that will be used for GPG encryption:"
  read -s MAIN_PASS
  
  echo "Select a File that contains a list of public addresses to backup."
  PUB_ADDRESSES_LIST=$(zenity --file-selection --title="Select a file that contains a list of public addresses to be dumped." --filename=~/)
  case $? in
    0)
    echo "\"${PUB_ADDRESSES_LIST}\" selected.";;
    1)
    echo "No file selected.";;
    -1)
    echo "An unexpected error has occurred.";;
  esac

  echo "Your private keys will be encrypted symmetrically using GPG."
  echo "If you already have a file containing a passphrase, encrypted by your main passphrase, you may use this."
  echo "NOTE: The encrypted passphrase file should be held offline."
  read -p "Do you want to do select an existing passphrase file? [y/N]" YN
  case $YN in
    [Yy]* )
    select_passphrase_file
    ;;
    [Nn]* )
    create_passphrase_file
    ;;
    * ) echo "Please answer yes or no.";;
  esac

  # Decrypt the passphrase so that it can be used
  gpg -o temp-decrypted-passphrase --passphrase ${MAIN_PASS} --decrypt ${ENCRYPTED_PASSPHRASE}
  GPG_PASS=$(< temp-decrypted-passphrase)
  shred -vfzu temp-decrypted-passphrase

  echo "Key Backups: ${WALLET_NAME}, ${DATE}" > ${DUMP_DIR}/readme.md
  echo "============================================" >> ${DUMP_DIR}/readme.md
  echo "This directory contains private keys for the following public addresses:" >> ${DUMP_DIR}/readme.md

  PUB_ADDRESSES="$(< ${PUB_ADDRESSES_LIST})"
  for PUB in $PUB_ADDRESSES; do
    PRIV=$(${COIN}-cli dumpprivkey ${PUB})
    echo "${PUB}" >> ${DUMP_DIR}/readme.md
    echo "${PRIV}" > ${DUMP_DIR}/${PUB}
    echo "Encrypting private key for ${PUB} to ${DUMP_DIR}/${PUB}.gpg"
    gpg --armor --output ${DUMP_DIR}/${PUB}.gpg --batch --passphrase ${GPG_PASS} --symmetric ${DUMP_DIR}/${PUB}
    echo "Deleting temporary file ${DUMP_DIR}/${PUB}"
    shred -fzu ${DUMP_DIR}/${PUB}
  done

  ${COIN}-cli walletlock
  ${COIN}-cli stop
  echo "Your dumped keys:"
  echo "${DUMP_DIR}"
}

# Execute
# ------------------------------------------------------------------------------
read -p "Do you want to do unlock the wallet and dump keys? [y/N]" YN
case $YN in
  [Yy]* )
  open_port
  start_daemon
  unlock
  dump_keys
  ;;
  [Nn]* )
  echo "END."
  ;;
  * ) echo "Please answer yes or no.";;
esac
