#!/bin/bash
#
# This script runs `dumpprivkey` by safely unlocking the encrypted wallet and iterating
# over a list of supplied public addresses.
# See: https://bitcoin.org/en/developer-reference#dumpprivkey
#
# Note that port 8332 needs to be open to allow bitcoin-cli to communicate with bitcoind.
# By default, this port is closed in TAILS - so we need to add an appropriate
# iptables rule.
# ------------------------------------------------------------------------------
set -o nounset
set -o errexit
THIS=$(readlink -f ${BASH_SOURCE[0]})
PROJECT_ROOT=$(dirname $THIS)
. ${PROJECT_ROOT}/lib/config
. ${PROJECT_ROOT}/lib/select-coin
. ${PROJECT_ROOT}/lib/setup-binaries
. ${PROJECT_ROOT}/lib/setup-cold-wallet
CUSTOM_DATA_DIR='false'

read -p "Set up Binaries? [y/N]" PROCEED_BINARIES
case $PROCEED_BINARIES in
  [Yy]* )
    select_coin
    setup_binaries
  ;;
  [Nn]* )
    echo "Proceeding without setup of binaries..."
    select_coin
  ;;
  * ) echo "Please answer yes or no.";;
esac

read -p "Do you wish to set up a cold wallet? [y/N]" PROCEED
case $PROCEED in
  [Yy]* )
  select_cold_wallet
  copy_wallet
  WALLET_NAME=$(basename "${WALLET_FILE}")
  ;;
  [Nn]* )
  echo "END"
  ;;
  * ) echo "Please answer yes or no.";;
esac

# Unlock the wallet.
# ------------------------------------------------------------------------------
function unlock {
  echo "Please enter the wallet passphrase: "
  read -s WALLET_PASSPHRASE
  echo "Unlocking wallet..."
   ${COIN}-cli -wallet=cold-wallet.dat -rpcwait walletpassphrase "${WALLET_PASSPHRASE}" 600
}

# Use bitcoin-cli dumpprivkey command to output private keys for specified public
# addresses. The private key for each address is encrypted into a file whose filename
# corresponds to the public address. Uses GPG to symmetrically encrypt the dumped
# private key files, then securely deletes the originals using the shred utility.
# ------------------------------------------------------------------------------
function dump_keys {
  DATE=$(date "+%Y-%m-%d-%H:%M:%S")
  DUMP_DIR=~/${COIN}-dumpwallet-${WALLET_NAME}

  mkdir -p ${DUMP_DIR}
  echo "Select a File that contains a list of public addresses to backup."
  PUB_ADDRESSES_LIST=$(zenity --file-selection --title="Select a file that contains a list of public addresses to be dumped." --filename=~/)
  case $? in
    0)
    echo "\"${PUB_ADDRESSES_LIST}\" selected.";;
    1)
    echo "No file selected.";;
    -1)
    echo "An unexpected error has occurred.";;
  esac

  echo "Key Backups: ${WALLET_NAME}, ${DATE}" > ${DUMP_DIR}/readme.md
  echo "============================================" >> ${DUMP_DIR}/readme.md
  echo "This directory contains private keys for the following public addresses:" >> ${DUMP_DIR}/readme.md

  echo "Enter a passphrase for GPG encryption:"
  read -s GPG_PASS

  PUB_ADDRESSES="$(< ${PUB_ADDRESSES_LIST})"
  for PUB in $PUB_ADDRESSES; do
    PRIV=$(${COIN}-cli dumpprivkey ${PUB})
    echo "${PUB}" >> ${DUMP_DIR}/readme.md
    echo "${PRIV}" > ${DUMP_DIR}/${PUB}
    gpg --armor --output ${DUMP_DIR}/${PUB}.gpg --batch --passphrase ${GPG_PASS} --symmetric ${DUMP_DIR}/${PUB}
    shred -vfzu ${DUMP_DIR}/${PUB}
  done

  ${COIN}-cli walletlock
  ${COIN}-cli stop
  echo "Your dumped keys:"
  echo "${DUMP_DIR}"
}

# Execute
# ------------------------------------------------------------------------------
read -p "Do you want to do unlock the wallet and dump keys? [y/N]" YN
case $YN in
  [Yy]* )
  open_port
  start_daemon
  unlock
  dump_keys
  ;;
  [Nn]* )
  echo "END."
  ;;
  * ) echo "Please answer yes or no.";;
esac
